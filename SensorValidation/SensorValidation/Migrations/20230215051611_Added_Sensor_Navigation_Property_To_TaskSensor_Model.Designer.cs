// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SensorValidation.Persistence;

#nullable disable

namespace SensorValidation.Migrations
{
    [DbContext(typeof(SensorValidationDbContext))]
    [Migration("20230215051611_Added_Sensor_Navigation_Property_To_TaskSensor_Model")]
    partial class Added_Sensor_Navigation_Property_To_TaskSensor_Model
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.13");

            modelBuilder.Entity("SensorValidation.Models.Entities.SensorModel", b =>
                {
                    b.Property<long>("Serial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivityStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentConfiguration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentFirmware")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("NextTask")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Serial");

                    b.ToTable("Sensors");

                    b.HasData(
                        new
                        {
                            Serial = 1L,
                            ActivityStatus = "Error",
                            CreatedAt = new DateTime(2023, 1, 26, 5, 16, 10, 875, DateTimeKind.Utc).AddTicks(1704),
                            CurrentConfiguration = "a.config",
                            CurrentFirmware = "FW:23-015-2023:03",
                            NextTask = 1L,
                            StatusId = 1,
                            StatusName = "Idle",
                            TaskCount = 3,
                            Type = "TS50X",
                            UpdatedAt = new DateTime(2023, 1, 26, 5, 16, 10, 875, DateTimeKind.Utc).AddTicks(1710)
                        },
                        new
                        {
                            Serial = 2L,
                            ActivityStatus = "Error",
                            CreatedAt = new DateTime(2023, 1, 26, 5, 16, 10, 875, DateTimeKind.Utc).AddTicks(1768),
                            CurrentConfiguration = "b.config",
                            CurrentFirmware = "FW:23-015-2023:03",
                            NextTask = 2L,
                            StatusId = 1,
                            StatusName = "Idle",
                            TaskCount = 3,
                            Type = "TS50X",
                            UpdatedAt = new DateTime(2023, 1, 26, 5, 16, 10, 875, DateTimeKind.Utc).AddTicks(1769)
                        });
                });

            modelBuilder.Entity("SensorValidation.Models.Entities.TaskModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttemptCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SensorSerial")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttemptCount = 3,
                            CreatedAt = new DateTime(2023, 1, 27, 5, 16, 10, 875, DateTimeKind.Utc).AddTicks(1786),
                            FileId = "",
                            SensorSerial = 2L,
                            StatusId = 0,
                            StatusName = "Pending",
                            Type = "update_firmware",
                            UpdatedAt = new DateTime(2023, 1, 27, 5, 16, 10, 875, DateTimeKind.Utc).AddTicks(1787)
                        },
                        new
                        {
                            Id = 2,
                            AttemptCount = 3,
                            CreatedAt = new DateTime(2023, 1, 27, 5, 16, 10, 875, DateTimeKind.Utc).AddTicks(1863),
                            FileId = "",
                            SensorSerial = 1L,
                            StatusId = 0,
                            StatusName = "Pending",
                            Type = "update_firmware",
                            UpdatedAt = new DateTime(2023, 1, 27, 5, 16, 10, 875, DateTimeKind.Utc).AddTicks(1864)
                        });
                });

            modelBuilder.Entity("SensorValidation.Models.Entities.TaskSensorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SensorSerial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SensorSerial");

                    b.ToTable("TaskSensors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileId = "51372ed9-d15a-418d-aeb0-88044bca3327",
                            SensorSerial = 2L,
                            Type = "update_configuration"
                        },
                        new
                        {
                            Id = 2,
                            FileId = "102df6d0-f17d-4283-b28a-537c30dfc540",
                            SensorSerial = 1L,
                            Type = "update_firmware"
                        });
                });

            modelBuilder.Entity("SensorValidation.Models.Entities.TaskSensorModel", b =>
                {
                    b.HasOne("SensorValidation.Models.Entities.SensorModel", "Sensor")
                        .WithMany("TaskQueue")
                        .HasForeignKey("SensorSerial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("SensorValidation.Models.Entities.SensorModel", b =>
                {
                    b.Navigation("TaskQueue");
                });
#pragma warning restore 612, 618
        }
    }
}
